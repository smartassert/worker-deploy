name: Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set version
        id: version
        env:
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          [[ ! -z "$RELEASE_TAG_NAME" ]] && echo "::set-output name=value::$RELEASE_TAG_NAME" || echo "::set-output name=value::master"

  build:
    needs: setup
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get versions from image-versions.env
        id: image-versions
        env:
          ENV_FILE_PATH: ./image-versions.env
        run: ./ci/read-env-file.sh

      - name: Output image versions
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          echo COMPILER_VERSION $COMPILER_VERSION
          echo CHROME_RUNNER_VERSION $CHROME_RUNNER_VERSION
          echo FIREFOX_RUNNER_VERSION $FIREFOX_RUNNER_VERSION
          echo DELEGATOR_VERSION $DELEGATOR_VERSION
          echo WORKER_VERSION $WORKER_VERSION

      - name: Set snapshot name
        id: snapshot_name
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.number }}
          RELEASE_TAG_NAME: ${{ needs.setup.outputs.version }}
        run: |
          SNAPSHOT_NAME=$(./ci/create-snapshot-name.sh)
          echo "::set-output name=value::$SNAPSHOT_NAME"

      - name: Verify snapshot name
        run: echo ${{ steps.snapshot_name.outputs.value }}

      - name: Install packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Verify packer installation
        run: packer --version

      - name: Verify image configuration
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ steps.snapshot_name.outputs.value }}
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: packer validate image.pkr.hcl

      - name: Create snapshot
        id: snapshot
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ steps.snapshot_name.outputs.value }}
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          packer build image.pkr.hcl | tee packer.log
          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
          echo "::set-output name=id::$ID"

      - name: Verify snapshot exists
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          ID: ${{ steps.snapshot.outputs.id }}
        run: ./ci/verify-snapshot-exists.sh

      - name: Remove snapshot if not a release
        if: ${{ github.event_name != 'release' }}
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          ID: ${{ steps.snapshot.outputs.id }}
        run: |
          ./ci/delete-snapshot.sh
          ./ci/verify-snapshot-not-exists.sh

      - name: Trigger deploy workflow if this a release
        if: ${{ github.event_name == 'release' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.PAT_TOKEN_SELF }}
          inputs: |
            {
              "image_id": "${{ steps.snapshot.outputs.id }}"
            }
