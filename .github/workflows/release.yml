name: Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      should-deploy:
        description: Deploy after building image?
        required: true
        default: "false"
      version:
        description: Existing version to release
        required: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.should-deploy.outputs.value }}
      version: ${{ steps.version.outputs.value }}
      snapshot-name: ${{ steps.snapshot-name.outputs.value }}
      compiler-version: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
      chrome-runner-version: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
      firefox-runner-version: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
      delegator-version: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
      worker-version: ${{ steps.image-versions.outputs.WORKER_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use specific version?
        id: use-specific-version
        env:
          VALUE: ${{ github.event.inputs.version }}
        run: echo "::set-output name=value::$(./scripts/is-value-set.sh)"

      - name: Output use specific version
        run: echo ${{ steps.use-specific-version.outputs.value }}

      - name: Set version
        id: version
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: echo "::set-output name=value::$(./scripts/set-version.sh)"

      - name: Output version
        run: echo ${{ steps.version.outputs.value }}

      - name: Get specific version image-versions.env?
        if: ${{ steps.use-specific-version.outputs.value == 'true' }}
        env:
          VERSION: ${{ steps.version.outputs.value }}
        run: ./scripts/get-image-versions-env.sh

      - name: Deploy after building image?
        id: should-deploy
        env:
          INPUT_SHOULD_DEPLOY: ${{ github.event.inputs.should-deploy }}
          EVENT_NAME: ${{ github.event_name }}
        run: echo "::set-output name=value::$(./scripts/should-deploy.sh)"

      - name: Output should deploy
        run: echo ${{ steps.should-deploy.outputs.value }}

      - name: Set snapshot name
        id: snapshot-name
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.number }}
          VERSION: ${{ steps.version.outputs.value }}
        run: echo "::set-output name=value::$(./scripts/create-snapshot-name.sh)"

      - name: Output snapshot name
        run: echo ${{ steps.snapshot-name.outputs.value }}

      - name: Get versions from image-versions.env
        id: image-versions
        env:
          ENV_FILE_PATH: ./image-versions.env
        run: ./scripts/read-env-file.sh

      - name: Output image versions
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: ./scripts/create-release-notes.sh

  create-image:
    needs: setup
    name: Create image
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
      VERSION: ${{ needs.setup.outputs.version }}
      SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot-name }}
      COMPILER_VERSION: ${{ needs.setup.outputs.compiler-version }}
      CHROME_RUNNER_VERSION: ${{ needs.setup.outputs.chrome-runner-version }}
      FIREFOX_RUNNER_VERSION: ${{ needs.setup.outputs.firefox-runner-version }}
      DELEGATOR_VERSION: ${{ needs.setup.outputs.delegator-version }}
      WORKER_VERSION: ${{ needs.setup.outputs.worker-version }}
    outputs:
      image-id: ${{ steps.image.outputs.id }}

    steps:
      - name: Checkout default branch
        uses: actions/checkout@v2

      - name: Install packer
        run: ./scripts/packer-install.sh

      - name: Validate image configuration
        env:
          IMAGE_DEFINITION: "image.pkr.hcl"
        run: ./scripts/packer-validate.sh

      - name: Create image
        id: image
        env:
          IMAGE_DEFINITION: "image.pkr.hcl"
        run: |
          . ./scripts/packer-build.sh
          echo "::set-output name=id::$IMAGE_ID"

      - name: Verify image exists
        env:
          IMAGE_ID: ${{ steps.image.outputs.id }}
        run: ./scripts/verify-snapshot-exists.sh

  trigger-deploy:
    needs: [setup, create-image]
    name: Trigger deploy workflow
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Trigger deploy workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.PAT_TOKEN_SELF }}
          inputs: |
            {
              "image_id": "${{ needs.create-image.outputs.image-id }}"
            }

  remove-snapshot:
    needs: create-image
    name: Remove snapshot if not deploying
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Remove snapshot
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ needs.create-image.outputs.image-id }}
        run: |
          ./scripts/delete-snapshot.sh
          ./scripts/verify-snapshot-not-exists.sh
