name: Build Image

on:
#  push:
#    branches:
#      - master
  pull_request:
#    branches:
#      - master
#  release:
#    types:
#      - published

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set snapshot name
        id: snapshot_name
        run: |
          EVENT_NAME=${{ github.event_name }} \
          PR_NUMBER=${{ github.event.number }} \
          RELEASE_TAG_NAME=${{ github.event.release.tag_name }} \
          ./ci/create-snapshot-name.sh

      - name: Verify snapshot name
        run: echo ${{ steps.snapshot_name.outputs.value }}

      - name: Install packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Verify packer installation
        run: |
          packer --version
          if [ $? -ne 0 ]; then exit 1; fi; exit 0;

      - name: Get versions from .image-versions.env
        id: dependency-versions
        run: |
          while read line
          do
            key=$(echo $line | cut -d'=' -f1)
            value=$(echo $line | cut -d'=' -f2)
            echo "::set-output name=$key::$value"
          done <<<$(cat .image-versions.env)

      - name: Examine versions
        run: |
          echo steps.dependency-versions.outputs.COMPILER_VERSION ${{ steps.dependency-versions.outputs.COMPILER_VERSION }}
          echo steps.dependency-versions.outputs.CHROME_RUNNER_VERSION ${{ steps.dependency-versions.outputs.CHROME_RUNNER_VERSION }}
          echo steps.dependency-versions.outputs.FIREFOX_RUNNER_VERSION ${{ steps.dependency-versions.outputs.FIREFOX_RUNNER_VERSION }}
          echo steps.dependency-versions.outputs.DELEGATOR_VERSION ${{ steps.dependency-versions.outputs.DELEGATOR_VERSION }}
          echo steps.dependency-versions.outputs.WORKER_VERSION ${{ steps.dependency-versions.outputs.WORKER_VERSION }}
#
#      - name: Verify image configuration
#        run: |
#          packer validate \
#          -var 'digitalocean_api_token=${{ secrets.DIGITALOCEAN_API_TOKEN }}' \
#          -var 'snapshot_name=${{ steps.snapshot_name.outputs.value }}' \
#          -var 'compiler_version=${{ steps.dependency-versions.outputs.COMPILER_VERSION }}' \
#          -var 'chrome_runner_version=${{ steps.dependency-versions.outputs.CHROME_RUNNER_VERSION }}' \
#          -var 'firefox_runner_version=${{ steps.dependency-versions.outputs.FIREFOX_RUNNER_VERSION }}' \
#          -var 'delegator_version=${{ steps.dependency-versions.outputs.DELEGATOR_VERSION }}' \
#          -var 'worker_version=${{ steps.dependency-versions.outputs.WORKER_VERSION }}' \
#          image.pkr.hcl
#
#      - name: Create image
#        run: |
#          packer build \
#          -var 'digitalocean_api_token=${{ secrets.DIGITALOCEAN_API_TOKEN }}' \
#          -var 'snapshot_name=${{ steps.snapshot_name.outputs.value }}' \
#          -var 'compiler_version=${{ steps.dependency-versions.outputs.COMPILER_VERSION }}' \
#          -var 'chrome_runner_version=${{ steps.dependency-versions.outputs.CHROME_RUNNER_VERSION }}' \
#          -var 'firefox_runner_version=${{ steps.dependency-versions.outputs.FIREFOX_RUNNER_VERSION }}' \
#          -var 'delegator_version=${{ steps.dependency-versions.outputs.DELEGATOR_VERSION }}' \
#          -var 'worker_version=${{ steps.dependency-versions.outputs.WORKER_VERSION }}' \
#          image.pkr.hcl | tee packer.log
#          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
#          ./ci/verify-snapshot-exists.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
#
#      - name: Remove created image
#        if: ${{ github.event_name }} != 'release'
#        run: |
#          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
#          ./ci/delete-snapshot.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          ./ci/verify-snapshot-not-exists.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
