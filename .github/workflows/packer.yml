name: Build Image

on:
#  push:
#    branches:
#      - master
  pull_request:
#    branches:
#      - master
#  release:
#    types:
#      - published

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set snapshot name
        id: snapshot_name
        run: |
          EVENT_NAME=${{ github.event_name }} \
          PR_NUMBER=${{ github.event.number }} \
          RELEASE_TAG_NAME=${{ github.event.release.tag_name }} \
          ./ci/create-snapshot-name.sh

      - name: Verify snapshot name
        run: echo ${{ steps.snapshot_name.outputs.value }}

      - name: Install packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Verify packer installation
        run: |
          packer --version
          if [ $? -ne 0 ]; then exit 1; fi; exit 0;

      - name: Get versions from .image-versions.env
        id: image-versions
        run: |
          while read line
          do
            key=$(echo $line | cut -d'=' -f1)
            value=$(echo $line | cut -d'=' -f2)
            echo "::set-output name=$key::$value"
          done <.image-versions.env

      - name: Output image versions
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          echo COMPILER_VERSION $COMPILER_VERSION
          echo CHROME_RUNNER_VERSION $CHROME_RUNNER_VERSION
          echo FIREFOX_RUNNER_VERSION $FIREFOX_RUNNER_VERSION
          echo DELEGATOR_VERSION $DELEGATOR_VERSION
          echo WORKER_VERSION $WORKER_VERSION

      - name: Verify image configuration
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          packer validate \
          -var 'digitalocean_api_token=${{ secrets.DIGITALOCEAN_API_TOKEN }}' \
          -var 'snapshot_name=${{ steps.snapshot_name.outputs.value }}' \
          -var 'compiler_version=$COMPILER_VERSION' \
          -var 'chrome_runner_version=$CHROME_RUNNER_VERSION' \
          -var 'firefox_runner_version=$FIREFOX_RUNNER_VERSION' \
          -var 'delegator_version=$DELEGATOR_VERSION' \
          -var 'worker_version=$WORKER_VERSION' \
          image.pkr.hcl

      - name: Create image
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          packer build \
          -var 'digitalocean_api_token=${{ secrets.DIGITALOCEAN_API_TOKEN }}' \
          -var 'snapshot_name=${{ steps.snapshot_name.outputs.value }}' \
          -var 'compiler_version=0.29' \
          -var 'chrome_runner_version=0.18' \
          -var 'firefox_runner_version=0.18' \
          -var 'delegator_version=0.6' \
          -var 'worker_version=0.4' \
          image.pkr.hcl | tee packer.log
          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
          ./ci/verify-snapshot-exists.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          if [ $? -ne 0 ]; then exit 1; fi; exit 0;

      - name: Remove created image
        if: ${{ github.event_name }} != 'release'
        run: |
          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
          ./ci/delete-snapshot.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          ./ci/verify-snapshot-not-exists.sh $ID ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
