name: "[Temp] Investigate release payload"

on:
  release:
    types:
      - published

jobs:
  build:
    name: Investigate release payload Workflow
    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        env:
          CONTEXT: ${{ toJson(github) }}
        run: echo "$CONTEXT"

      - name: Dump release tag name
        env:
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: echo $RELEASE_TAG_NAME

      - name: Dump assets context
        env:
          CONTEXT: ${{ toJson(github.event.release.assets) }}
        run: echo "$CONTEXT"

      - name: Build image versions url
        id: image-versions-url
        env:
          ASSERT_URL_TEMPLATE: https://github.com/smartassert/worker-deploy/releases/download/{{ version }}/image-versions.env
          SOURCE_URL_TEMPLATE: https://raw.githubusercontent.com/smartassert/worker-deploy/{{ version }}/image-versions.env
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          ASSERT_URL=$(echo $ASSERT_URL_TEMPLATE | sed "s@{{ version }}@$RELEASE_TAG_NAME@g")
          ASSERT_URL_STATUS_CODE=$(curl -L -s -o /dev/null -w "%{http_code}" $ASSERT_URL)

          if [ "200" != "$ASSERT_URL_STATUS_CODE" ]; then
            echo "assert url not exists"

            SOURCE_URL=$(echo $SOURCE_URL_TEMPLATE | sed "s@{{ version }}@$RELEASE_TAG_NAME@g")
            SOURCE_URL_STATUS_CODE=$(curl -L -s -o /dev/null -w "%{http_code}" $SOURCE_URL)

            if [ "200" != "$ASSERT_URL_STATUS_CODE" ]; then
              echo "release url not exists"
              exit 1
            else
              URL=$SOURCE_URL
            fi

          else
            URL=$ASSERT_URL
          fi

          echo "::set-output name=value::$URL"

      - name: Get image versions
        env:
          ASSERT_URL_TEMPLATE: https://github.com/smartassert/worker-deploy/releases/download/{{ version }}/image-versions.env
          SOURCE_URL_TEMPLATE: https://raw.githubusercontent.com/smartassert/worker-deploy/{{ version }}/image-versions.env
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          URL: ${{ steps.image-versions-url.outputs.value }}
        run: |
          echo URL $URL
          IMAGE_VERSIONS=$(curl -L $URL)
          echo $IMAGE_VERSIONS
          echo $IMAGE_VERSIONS > image-versions.env

      - name: Dump image versions
        run: |
          ls -la
          cat image-versions.env
          while read line
          do
            key=$(echo $line | cut -d'=' -f1)
            value=$(echo $line | cut -d'=' -f2)
            echo "::set-output name=$key::$value"
          done < image-versions.env
