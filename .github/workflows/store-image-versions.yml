name: Store image versions

on:
  repository_dispatch:
    types: [worker-release]

jobs:
  build:
    name: Store image versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN_SELF }}

      - name: Output payload
        env:
          PAYLOAD: ${{ toJson(github.event.client_payload) }}
        run: echo "$PAYLOAD"

      - name: Update image-versions.env
        if: ${{ github.event.client_payload.worker_version != 'master' }}
        id: update
        env:
          COMPILER_VERSION: ${{ github.event.client_payload.compiler_version }}
          CHROME_RUNNER_VERSION: ${{ github.event.client_payload.chrome_runner_version }}
          FIREFOX_RUNNER_VERSION: ${{ github.event.client_payload.firefox_runner_version }}
          DELEGATOR_VERSION: ${{ github.event.client_payload.delegator_version }}
          WORKER_VERSION: ${{ github.event.client_payload.worker_version }}
        run: |
          cp image-versions.env image-versions.old
          rm -f image-versions.env
          echo "COMPILER_VERSION=$COMPILER_VERSION" >> image-versions.env
          echo "CHROME_RUNNER_VERSION=$CHROME_RUNNER_VERSION" >> image-versions.env
          echo "FIREFOX_RUNNER_VERSION=$FIREFOX_RUNNER_VERSION" >> image-versions.env
          echo "DELEGATOR_VERSION=$DELEGATOR_VERSION" >> image-versions.env
          echo "WORKER_VERSION=$WORKER_VERSION" >> image-versions.env

          if cmp --quiet image-versions.env image-versions.old ; then
            echo "::set-output name=has_changes::false"
          else
            echo "::set-output name=has_changes::true"
          fi

          rm image-versions.old

      - name: Commit changes
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Automatic image-versions.env for worker release ${{ github.event.client_payload.worker_version }}"

      - name: Get latest commit hash
        id: commit_hash
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "::set-output name=value::$COMMIT_HASH"

      - name: Get versions from image-versions.env
        id: image-versions
        env:
          ENV_FILE_PATH: ./image-versions.env
        run: ./ci/read-env-file.sh

      - name: Create release notes
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        id: release_notes
        env:
          COMPILER_VERSION: ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          CHROME_RUNNER_VERSION: ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          FIREFOX_RUNNER_VERSION: ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          DELEGATOR_VERSION: ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          WORKER_VERSION: ${{ steps.image-versions.outputs.WORKER_VERSION }}
        run: |
          rm -f release-notes.md
          echo "- compiler: $COMPILER_VERSION" >> release-notes.md
          echo "- chrome runner: $CHROME_RUNNER_VERSION" >> release-notes.md
          echo "- firefox runner: $FIREFOX_RUNNER_VERSION" >> release-notes.md
          echo "- delegator: $DELEGATOR_VERSION" >> release-notes.md
          echo "- worker: $WORKER_VERSION" >> release-notes.md

      - name: Create release
        if: ${{ steps.update.outputs.has_changes == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN_SELF }}
          TAG: ${{ github.event.client_payload.worker_version }}
          TARGET: ${{ steps.commit_hash.outputs.value }}
          TITLE: "Automatic release ${{ github.event.client_payload.worker_version }}"
          NOTES: ${{ steps.release_notes.outputs.value }}
        run: |
          gh release create $TAG --target $TARGET --title "$TITLE" --notes-file ./release-notes.md
